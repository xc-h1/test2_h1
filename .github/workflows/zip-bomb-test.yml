name: Zip Bomb Upload Workflow

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  unzip-and-upload:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Install unzip utility
      - name: Install unzip
        run: sudo apt-get install -y unzip

      # Step 3: List files in the ZIP
      - name: List files in ZIP
        id: list_files
        run: |
          if unzip -l zbbig2.zip > file_list.txt; then
            echo "Files listed successfully."
            cat file_list.txt
          else
            echo "Failed to list files in zip."
            exit 1
          fi

      # Step 4: Unzip, commit, and delete files in batches
      - name: Unzip and commit files in batches
        run: |
          # Function to unzip a file
          unzip_file() {
            file=$1
            echo "Extracting $file..."
            unzip -o zbbig2.zip "$file" || { echo "Failed to extract $file"; return 1; }
            echo "$file extracted successfully."
            return 0
          }

          # Function to push a file
          push_file() {
            file=$1
            echo "Processing $file..."
            # Set up Git user for committing
            git config --global user.name 'github-actions[bot]'
            git config --global user.email 'github-actions[bot]@users.noreply.github.com'

            # Commit the file
            git add "$file"
            git commit -m "Add extracted file: $file" || { echo "Failed to commit $file"; return 1; }
            git push || { echo "Failed to push $file"; return 1; }
            echo "$file pushed successfully."

            # Delete the file after pushing
            rm "$file" || echo "Failed to delete $file"
            echo "$file deleted."
            return 0
          }

          # Read file list and process files in batches
          while IFS= read -r line; do
            file=$(echo "$line" | awk '{print $NF}')

            # Only process files that start with 'assets/'
            if [[ $file == assets/* ]]; then
              # Unzip in background
              unzip_file "$file" &

              # Track the number of background jobs
              jobs+=("$!")

              # If we have 10 jobs, wait for them to finish
              if [[ ${#jobs[@]} -eq 10 ]]; then
                wait "${jobs[@]}"
                jobs=()  # Reset the jobs array
                echo "Batch of 10 files extracted successfully."
                # Now push all extracted files
                for f in assets/*; do
                  if [[ -f "$f" ]]; then
                    push_file "$f"
                    sleep 1  # Sleep after pushing
                  fi
                done
              fi
            fi
          done < file_list.txt

          # Wait for any remaining jobs after exiting the loop
          wait "${jobs[@]}"

          # Final push for remaining files
          for f in assets/*; do
            if [[ -f "$f" ]]; then
              push_file "$f"
              sleep 1  # Sleep after pushing
            fi
          done

      # Step 5: Clean up
      - name: Clean up
        run: rm file_list.txt
