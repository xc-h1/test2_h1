name: Zip Bomb Upload Workflow

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  unzip-and-upload:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Install unzip utility
      - name: Install unzip
        run: sudo apt-get install -y unzip

      # Step 3: List files in the ZIP
      - name: List files in ZIP
        id: list_files
        run: |
          unzip -l zbbig2.zip | awk '/assets\// {print $NF}' > file_list.txt
          echo "Files listed successfully:"
          cat file_list.txt

      # Step 4: Unzip and commit files in parallel
      - name: Unzip and commit files in batches
        run: |
          # Function to unzip, commit, and push files
          process_files() {
            files=("$@")
            for file in "${files[@]}"; do
              echo "Processing $file..."

              # Create a temporary directory for extracted files
              temp_dir="temp_extracted"
              mkdir -p "$temp_dir"

              # Extract the file into the temporary directory
              if unzip -o zbbig2.zip "$file" -d "$temp_dir"; then
                echo "$file extracted successfully."

                # Check if the file exists after extraction
                if [ -f "$temp_dir/$file" ]; then
                  # Set up Git user for committing
                  git config --global user.name 'github-actions[bot]'
                  git config --global user.email 'github-actions[bot]@users.noreply.github.com'

                  # Commit the file
                  git add "$temp_dir/$file"
                  git commit -m "Add extracted file: $file"
                  git push || echo "Push failed"

                  # Delete the file after pushing
                  rm "$temp_dir/$file" || echo "Failed to delete $file"
                else
                  echo "$file not found after extraction."
                fi
              else
                echo "Failed to extract $file"
              fi

              # Clean up temporary directory if empty
              if [ "$(ls -A $temp_dir)" ]; then
                echo "Temporary directory not empty: $temp_dir"
              else
                rmdir "$temp_dir" || echo "Failed to remove temporary directory"
              fi

              # Sleep for 1 second to avoid hitting rate limits
              sleep 1
            done
          }

          # Read file list and process files in batches of 10
          while IFS= read -r line; do
            files+=("$line")  # Store file names

            # Process in batches of 10
            if [ ${#files[@]} -eq 10 ]; then
              process_files "${files[@]}"
              files=()  # Reset the array for the next batch
            fi
          done < file_list.txt

          # Process remaining files if any
          if [ ${#files[@]} -gt 0 ]; then
            process_files "${files[@]}"
          fi

      # Step 5: Clean up
      - name: Clean up
        run: rm file_list.txt
