name: Zip Bomb Upload Workflow

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  unzip-and-upload:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Install unzip utility
      - name: Install unzip
        run: sudo apt-get install -y unzip

      # Step 3: List files in the ZIP and save to a file
      - name: List files in ZIP
        id: list_files
        run: |
          if unzip -l zbbig2.zip | awk '/assets\// {print $NF}' > file_list.txt; then
            echo "Files listed successfully."
            cat file_list.txt
          else
            echo "Failed to list files in zip."
            exit 1
          fi

      # Step 4: Unzip files one by one
      - name: Unzip and commit files in parallel
        run: |
          # Create a temporary directory for extraction
          mkdir -p temp_extraction

          # Function to unzip a file
          unzip_file() {
            file="$1"
            echo "Extracting $file..."
            if unzip -o zbbig2.zip "$file" -d temp_extraction; then
              echo "$file extracted successfully."

              # Move the extracted file to the root directory
              mv "temp_extraction/$file" .

              # Check if the file exists after extraction
              if [ -f "$file" ]; then
                # Set up Git user for committing
                git config --global user.name 'github-actions[bot]'
                git config --global user.email 'github-actions[bot]@users.noreply.github.com'

                # Commit the file
                git add "$file"
                git commit -m "Add extracted file: $file"
                git push || echo "Push failed"

                # Delete the file after pushing
                rm "$file" || echo "Failed to delete $file"
              else
                echo "$file not found after extraction."
              fi
            else
              echo "Failed to extract $file"
            fi
          }

          # Track background jobs
          pids=()
          count=0
          while IFS= read -r file; do
            # Start extraction in the background
            unzip_file "$file" &
            pids+=($!)

            # Increase the count of running processes
            ((count++))

            # If we've started 10 processes, wait for them to finish
            if (( count % 10 == 0 )); then
              echo "Waiting for background processes to finish..."
              for pid in "${pids[@]}"; do
                wait "$pid" || echo "Process $pid failed"
              done
              pids=()  # Clear the array for the next batch
            fi
          done < file_list.txt

          # Wait for any remaining processes to finish
          for pid in "${pids[@]}"; do
            wait "$pid" || echo "Process $pid failed"
          done

          # Clean up temporary extraction directory
          rm -rf temp_extraction

      # Step 5: Clean up
      - name: Clean up
        run: rm file_list.txt
