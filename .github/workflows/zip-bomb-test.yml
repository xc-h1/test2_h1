name: Zip Bomb Upload Workflow

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  unzip-and-upload:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Install necessary utilities
      - name: Install utilities
        run: sudo apt-get install -y unzip parallel

      # Step 3: List files in the ZIP and save to file
      - name: List files in ZIP
        id: list_files
        run: |
          if unzip -l zbbig2.zip > file_list.txt; then
            # Extract only the list of files (skip headers and footers)
            tail -n +4 file_list.txt | head -n -2 | awk '{print $NF}' | grep '^assets/' > filtered_file_list.txt
            echo "Files listed successfully."
            cat filtered_file_list.txt
          else
            echo "Failed to list files in zip."
            exit 1
          fi

      # Step 4: Unzip and commit files in batches
      - name: Unzip and commit files in batches
        run: |
          # Function to extract and commit a single file
          unzip_and_commit() {
            file=$1
            echo "Extracting $file..."
            if unzip -o zbbig2.zip "$file"; then
              echo "$file extracted successfully."

              # Check if the file exists after extraction
              if [ -f "$file" ]; then
                # Set up Git user for committing
                git config --global user.name 'github-actions[bot]'
                git config --global user.email 'github-actions[bot]@users.noreply.github.com'

                # Commit the file
                git add "$file"
                git commit -m "Add extracted file: $file"
                echo "$file committed."

                # Delete the file after committing
                rm "$file" || echo "Failed to delete $file"
              else
                echo "$file not found after extraction."
              fi
            else
              echo "Failed to extract $file"
              exit 1
            fi
          }

          export -f unzip_and_commit

          # Process files in batches of 5, and commit them
          while IFS= read -r file; do
            # Run parallel processing for up to 5 files at a time
            parallel -j 5 unzip_and_commit ::: "$file"

            # After 5 files, push the changes and delete extracted files
            echo "Pushing changes to the repository..."
            git push || echo "Push failed"

            # Pause for 1 second before starting the next batch
            sleep 1
          done < filtered_file_list.txt

      # Step 5: Clean up file lists
      - name: Clean up
        run: rm -f file_list.txt filtered_file_list.txt
