name: Zip Bomb Upload Workflow

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  unzip-and-upload:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Install unzip utility
      - name: Install unzip
        run: sudo apt-get install -y unzip

      # Step 3: List files in the ZIP and save to a file
      - name: List files in ZIP
        id: list_files
        run: |
          if unzip -l zbbig2.zip > file_list.txt; then
            echo "Files listed successfully."
            cat file_list.txt
          else
            echo "Failed to list files in zip."
            exit 1
          fi

      # Step 4: Unzip and commit files concurrently
      - name: Unzip and commit files concurrently
        run: |
          max_parallel=10
          current_processes=0

          commit_files() {
            # Function to commit and push extracted files
            git config --global user.name 'github-actions[bot]'
            git config --global user.email 'github-actions[bot]@users.noreply.github.com'

            # Check if there are files to commit
            if git diff --cached --quiet; then
              echo "No new files to commit."
            else
              git commit -m "Add extracted files"
              git push || echo "Push failed"
            fi
          }

          extract_file() {
            local file="$1"
            echo "Extracting $file..."
            if unzip -o zbbig2.zip "$file"; then
              echo "$file extracted successfully."

              # Check if the file exists after extraction
              if [ -f "$file" ]; then
                git add "$file"
                # Sleep to prevent GitHub rate limits
                sleep 1

                # Delete the file after adding to git
                rm "$file" || echo "Failed to delete $file"
              else
                echo "$file not found after extraction."
              fi
            else
              echo "Failed to extract $file"
            fi
          }

          while IFS= read -r line; do
            # Extract the file name from the line
            file=$(echo "$line" | awk '{print $NF}')

            # Only process files that start with 'assets/'
            if [[ $file == assets/* ]]; then
              extract_file "$file" &  # Start extraction in the background
              ((current_processes++))

              # Check if we've hit the max parallel processes
              if [[ $current_processes -ge $max_parallel ]]; then
                wait  # Wait for all background processes to finish
                commit_files  # Commit the extracted files
                current_processes=0  # Reset the process count
              fi
            fi
          done < file_list.txt

          # Wait for any remaining background processes to finish
          wait
          commit_files  # Final commit if any files were extracted

      # Step 5: Clean up
      - name: Clean up
        run: rm file_list.txt
