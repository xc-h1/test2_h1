name: Zip Bomb Upload Workflow

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  unzip-and-upload:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Install unzip utility
      - name: Install unzip
        run: sudo apt-get install -y unzip

      # Step 3: List files in the ZIP
      - name: List files in ZIP
        id: list_files
        run: |
          unzip -l zbbig2.zip | awk '/assets\// {print $NF}' > file_list.txt
          echo "Files listed successfully:"
          cat file_list.txt

      # Step 4: Unzip and commit files in parallel
      - name: Unzip and commit files in batches
        run: |
          # Create a shared directory for extracted files
          shared_dir="shared_extracted"
          mkdir -p "$shared_dir"

          # Function to unzip and push files
          unzip_and_push() {
            file="$1"

            # Extract the file into the shared directory
            if unzip -o zbbig2.zip "$file" -d "$shared_dir"; then
              echo "$file extracted successfully."

              # Check if the file exists after extraction
              if [ -f "$shared_dir/$file" ]; then
                # Set up Git user for committing
                git config --global user.name 'github-actions[bot]'
                git config --global user.email 'github-actions[bot]@users.noreply.github.com'

                # Commit the file
                git add "$shared_dir/$file"
                git commit -m "Add extracted file: $file" || echo "No changes to commit."
                echo "Pushing changes for $file..."
                git push || echo "Push failed for $file"

                # Delete the file after pushing
                rm "$shared_dir/$file" || echo "Failed to delete $file"
              else
                echo "$file not found after extraction."
              fi
            else
              echo "Failed to extract $file"
            fi
          }

          # Read file list and process files in parallel
          while IFS= read -r line; do
            unzip_and_push "$line" &  # Start the unzip_and_push function in the background

            # Wait for the background jobs to finish if we've launched 10
            if [ $(jobs -r -p | wc -l) -ge 10 ]; then
              wait -n  # Wait for any job to finish before starting new ones
            fi
          done < file_list.txt

          # Wait for all remaining background jobs to finish
          wait

      # Step 5: Clean up
      - name: Clean up
        run: rm file_list.txt
